pipeline 
{
    agent any
    
    triggers 
    {
        pollSCM('*/1 * * * *')
    }
    
    stages 
    {
        stage('Cleanup') 
        {
            steps 
            {
                //Removes Unnecessary files
                echo 'Performing cleanup...'
                sh 'rm -rf *'
            }
        }
        
        stage('Clone') 
        {
            steps
            {
                //clonning from github to workspace
                echo 'Cloning repository...'
                sh 'git clone https://github.com/oksthefox/flask.git'
                sh 'ls'
            }
        }
        
        stage('Build-create docker image and push') 
        {
            steps 
            {
                //stage building
                echo 'Building...'
                echo ' pull docker'
                sh 'docker image build -t oksthefox/dockerflask flask/flask-app/'
                echo 'pushing to dockerhub'
                sh 'docker push oksthefox/dockerflask'
            }
        }
        

        stage('Get Test+Prod Instance Details + install docker')
        {
            steps 
            {
                //pulls IP of test instance by automatical means
                script 
                {
                    def instanceTestId = sh(script: "aws ec2 describe-instances --region eu-north-1 --filters 'Name=tag:servernumber,Values=flask1' 'Name=instance-state-name,Values=stopped' | jq -r .Reservations[].Instances[].InstanceId", returnStdout: true).trim()
                    def instanceProdId = sh(script: "aws ec2 describe-instances --region eu-north-1 --filters 'Name=tag:servernumber,Values=flask2' 'Name=instance-state-name,Values=stopped' | jq -r .Reservations[].Instances[].InstanceId", returnStdout: true).trim()
                    
                    if(instanceTestId)
                    {
                        //Test Not Running
                        sh (script: "aws ec2 start-instances --region eu-north-1 --instance-ids ${instanceTestId}")
                        sh (script: "aws ec2 wait instance-running --region eu-north-1 --instance-ids ${instanceTestId}")
                    }
                    else
                    {
                        //Gather Id with Running state
                        instanceTestId= sh(script: "aws ec2 describe-instances --region eu-north-1 --filters 'Name=tag:servernumber,Values=flask1' 'Name=instance-state-name,Values=running' | jq -r .Reservations[].Instances[].InstanceId", returnStdout: true).trim()
                    }
                    def publicTestIp = sh(script: "aws ec2 describe-instances --region eu-north-1 --instance-ids ${instanceTestId} | jq -r .Reservations[].Instances[].PublicIpAddress", returnStdout: true).trim()
                    env.instanceTestId = instanceTestId
                    env.publicTestIp = publicTestIp


                    if(instanceProdId)
                    {
                        //prod not running
                        sh (script: "aws ec2 start-instances --region eu-north-1 --instance-ids ${instanceProdId}")
                        sh (script: "aws ec2 wait instance-running --region eu-north-1 --instance-ids ${instanceProdId}")
                    }
                    else
                    {
                        //Gather Id with Running state
                        instanceProdId= sh (script: "aws ec2 describe-instances --region eu-north-1 --filters 'Name=tag:servernumber,Values=flask2' 'Name=instance-state-name,Values=running' | jq -r .Reservations[].Instances[].InstanceId", returnStdout: true).trim()
                    }
                    def publicProdIp =sh(script: "aws ec2 describe-instances --region eu-north-1 --instance-ids ${instanceProdId} | jq -r .Reservations[].Instances[].PublicIpAddress", returnStdout: true).trim() 
                    env.instanceProdId=instanceProdId
                    env.publicProdIp=publicProdIp


                     
                     
                }
            }
        }

        stage("install test+prod docker")
        {
            steps
            {
                echo 'installing docker...'
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicTestIp} 'sudo yum update -y'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicTestIp} 'sudo yum install docker -y'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicTestIp} 'sudo yum install -y python3-pip'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicTestIp} 'pip3 install docker-compose'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicTestIp} 'sudo service docker start'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicTestIp} 'sudo chkconfig docker on'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicTestIp} 'sudo usermod -aG docker ec2-user'"
                echo 'installing docker...'
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'sudo yum update -y'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'sudo yum install docker -y'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'sudo yum install -y python3-pip'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'pip3 install docker-compose'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'sudo service docker start'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'sudo chkconfig docker on'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'sudo usermod -aG docker ec2-user'"
            }
        }

        stage('Pull from dockerhub to test server') 
        {
            steps 
            {
                echo 'pull docker'
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicTestIp} 'docker pull oksthefox/dockerflask'"
            }
        }

        stage('Run 1 container to test server') 
        {
            steps 
            {
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicTestIp} 'sudo docker container prune --force'"
                sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicTestIp} 'docker container run --rm -d -p 5000:5000 oksthefox/dockerflask'"
            }
        }

        stage('Test') 
        {
            steps 
            {
                sh "curl http://${env.publicTestIp}:5000"
            }
        }
        
        stage('Closing test server- if success') 
        {
            steps 
            {
                sh "aws ec2 stop-instances --region eu-north-1 --instance-ids ${env.instanceTestId}"
                sh "aws ec2 wait instance-stopped --region eu-north-1 --instance-ids ${env.instanceTestId}"
            }
        }


        
        stage('Deployment') 
        {
            steps 
            {
                echo 'Deploying to the production server...'
                script 
                {
                    sh(script:"ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'docker container prune --force'")
                    def containerId = sh(script: "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'docker ps -aqf \"name=flask-container\"'", returnStdout: true).trim()
                    
                    // Check if container is already running on the production server
                    if (containerId) 
                    {
                        echo 'Existing container found on the production server.'
                        echo "Stopping and deleting the existing container..."
                        sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'docker stop ${containerId}'"
                        sh "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'sudo docker container prune --force'"
                    }
                    
                    echo 'Running new container on the production server...'
                    def newContainerId = sh(script: "ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/.ssh/oks.pem ec2-user@${env.publicProdIp} 'docker run -d -p 5003:5000 --name flask-container oksthefox/dockerflask'", returnStdout: true).trim()
                    
                    if (newContainerId) 
                    {
                        echo "New container started with ID: ${newContainerId}"
                    } 
                    else 
                    {
                        error "Failed to start the container on the production server."
                    }
                }
            }
        }
    }
}
