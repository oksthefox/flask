// this is the pipeline file for the flask project
//this library is used to call the functions from the pipelineFunctions library
@Library('PipelineFunctions') _

pipeline 
{
    agent any
    
    triggers 
    {
        pollSCM('*/1 * * * *')
    }
    // this is the enviroment variables
    environment
    {
        WINDOWSIP="192.168.56.1"
        JENKINSFILE="Jenkinsfile-kube"
        GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no" 
        GITURL="git@github.com:oksthefox/flask.git"
        ANSIBLEFOLDER="/var/lib/jenkins/AnsibleFiles/Ansible-JenkinsFiles"
        REQUIREMENTSFILE="./flask/flask-app/requirements.txt"
        FLASKIMAGE="oksthefox/dockerflask"
        DBIMAGE="oksthefox/dockerdb"
        FLASKAPPFOLDER="./flask/flask-app/"
        MYSQLFOLDER="./flask/mysql/"
        CONTEXTFORTESTING="docker-desktop"
        CHARTPACKAGENAME="myproject"
        FLASKFOLDER="./flask/"
        BUCKETNAME="my-terrform-state-oksana-flask-project"
        BUCKETFOLDER="helm-packages"
        GCPPROJECTID="ultra-palisade-393305"
        GCPZONE="me-west1-a"
        TERRAFORMFILESFOLDER="./flask/TerraformFiles"
        GCPCLUSTERNAME="cluster-flask2"
        ENVIROMENTFORTESTING="Testing"
        ENVIROMENTFORPRODUCTION="Production"
        DEPLOYMENTNAMEFORTESTING="flask-test"
        DEPLOYMENTNAMEFORPRODUCTION="flask-production"
        SERVICENAMEFORTESTING="flask-service-testing"
        SERVICENAMEFORPRODUCTION="flask-service-production"
        K8SFLASKDEPLOYMENT="flask-deployment"
        K8SMYSQLDEPLOYMENT="mysql-deployment"
        CONTEXTFORPRODUCTION="gke_ultra-palisade-393305_me-west1-a_cluster-flask2"
        PLAYBOOKFILE="installLocal.yml"
    }
    stages 
    {
        // this stage is used to login to docker
        stage('Docker Login') 
        {
            steps 
            {
                script
                {
                    // this function is used to login to docker
                    dockerfunctions.dockerLogin()    
                }
            }
        }
        
        // this stage is used to start the proxy
        stage('start proxy')
        {
            steps
            {
                script
                {
                    // this function is used to start the proxy using the windows ip on the windows machine
                    k8sfunctions.IpForProxy("${env.WINDOWSIP}") 
                }
            }
        }
        // this stage is used to check if there are changes in the Jenkinsfile-kube file if only changes to the Jenkinsfile-kube file, skip the pipeline
        stage('Changes Check') 
        {
            steps 
            {
                script 
                {
                    // Check for changes in the Jenkinsfile-kube file if only changes to the Jenkinsfile-kube file, skip the pipeline
                    pipelinefunctions.changeCheck()
                }
            }
        }

        // this stage is used to cleanup the workspace and the docker images
        stage('Cleanup') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                script 
                {
                    //this function is used to cleanup the workspace
                    pipelinefunctions.CleanupWorkspace()
                    // this function is used to cleanup the docker images 
                    dockerfunctions.CleanupDocker("${env.FLASKIMAGE}","${env.DBIMAGE}")
                }
            }
        }
        // this stage is used to clone the repo from github to the workspace and test if there are changes inn the helm chart and if there are it will send it to bucket and change the version on the chart
        stage('Build') 
        {

            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps
            {
                script
                {
                    // this function is used to clone the repo from github to the workspace
                    gitfunctions.GitClone("${env.GITURL}")
                    // this function is used to test if there are changes inn the helm chart and if there are it will send it to bucket and change the version on the chart
                    helm.packageHelmChart("${env.FLASKFOLDER}","${env.BUCKETNAME}","${env.BUCKETFOLDER}")
                }
                sh 'ls'
            }
        }
        // this stage is used to prepare the GKE cluster by creating it and installing the kubectl by using terraform
        stage('Prepare GKE Cluster') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                script 
                {
                    // this function is used to prepare the GKE cluster by creating it and installing the kubectl by using terraform
                    terraformfunctions.terraformApply("${env.TERRAFORMFILESFOLDER}", "${env.GCPCLUSTERNAM}", "${env.GCPZONE}", "${env.GCPPROJECTID}")
                }
            }
        }
        // this stage is used to install the system level dependencies
        stage('Install Systen Level Dependencies')
        {
            when
            {
                expression
                {
                    return env.RELEVANT_CHANGES !="false"
                }
            }
            steps
            {
                script
                {
                    // this function is used to install the system level dependencies
                    ansiblefunctions.InstallDependencies("${env.ANSIBLEFOLDER}","${env.PLAYBOOKFILE}")
                }
            }
        }
        // this stage is used to build the docker image for flask and push it to docker hub
        stage('Build-create docker flask image and push') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                script
                {
                    // this function is used to build the docker image for flask and push it to docker hub
                    dockerfunctions.BuildDocker("${env.FLASKAPPFOLDER}","${env.FLASKIMAGE}")
                }
            }
        }
        // this stage is used to build the docker image for mysql and push it to docker hub
        stage('Build-create docker DB image and push') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                script
                {
                    // this function is used to build the docker image for mysql and push it to docker hub
                    dockerfunctions.BuildDocker("${env.MYSQLFOLDER}","${env.DBIMAGE}")
                }
            }
        }
        // this stage check the context of kubectl and change it to docker-desktop, then it will deploy the helm chart to the testing enviroment and give it a name, then it will pull the tcp port of the test service, then it will rollout the deployment of flask and mysql, then it will test the application if it is working, then it will close the helm chart on the testing enviroment
        stage('Deploy for testing') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                script
                {
                    // this function is used to change the context to testing k8s
                    k8sfunctions.changeContext("${env.CONTEXTFORTESTING}")
                    // this function is used to deploy the helm chart to the testing enviroment and give it a name
                    k8sfunctions.deployToK8s("${env.CHARTPACKAGENAME}","${env.FLASKFOLDER}","${env.ENVIROMENTFORTESTING}","${env.DEPLOYMENTNAMEFORTESTING}")
                    // this function is used to pull the tcp port of the test service
                    k8sfunctions.pullTcp("${env.SERVICENAMEFORTESTING}")
                }
            }
        }
        // this stage is used to rollout the deployment of flask and mysql
        stage('Rollout Restart Test') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                script
                {
                    // this function is used to rollout the deployment of flask and mysql
                    k8sfunctions.rolloutK8S("${env.K8SFLASKDEPLOYMENT}","${env.K8SMYSQLDEPLOYMENT}")
                }
            }
        }
        // this stage is used to test the application if it is working
        stage('Test testing enviornment (d4d)')
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps
            {
                script
                {
                    // this function is used to test the application if it is working
                    k8sfunctions.testingTestEnv("${env.WINDOWSIP}","${env.KUBECTLTCPPORT}")
                }
            }
        }
        // this stage is used to close the helm chart on the testing enviroment
        stage('closing testing enviroment')
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps
            {
                script
                {
                    //this function is used to close the helm chart on the testing enviroment
                    helmfunctions.closingHelm("${env.DEPLOYMENTNAMEFORTESTING}")
                }
            }
        }
        //this stage is used to change the context to production, then it will deploy the helm chart to the production enviroment and give it a name, then it will pull the tcp port of the service, then it will rollout the deployment, then it will close the proxy
        stage('deploying on google k8s production')
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps
            {
                
                script
                {
                    //this function is used to change the context to production
                    k8sfunctions.changeContext("${env.CONTEXTFORPRODUCTION}")          
                    //this function is used to deploy the helm chart to the production enviroment and give it a name
                    k8sfunctions.deployToK8s("${env.CHARTPACKAGENAME}","${env.FLASKFOLDER}","${env.ENVIROMENTFORPRODUCTION}","${env.DEPLOYMENTNAMEFORPRODUCTION}")
                    //this function is used to pull the tcp port of the service
                    k8sfunctions.pullTcp("${env.SERVICENAMEFORPRODUCTION}")
                }
            }
        }
        //this stage is used to rollout the deployment
        stage('Rollout Restart K8s') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                //this function is used to rollout the deployment
                script
                {
                    k8sfunctions.rolloutK8S("${env.K8SFLASKDEPLOYMENT}","${env.K8SMYSQLDEPLOYMENT}")
                }
            }
        }
        // this stage is used to close the proxy
        stage('closing proxy')
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps
            {
                script
                {
                    // this function is used to close the proxy using the windows ip on the windows machine
                    k8sfunctions.closingProxy("${env.WINDOWSIP}")
                }
            }
        } 
    }
}


