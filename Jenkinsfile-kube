pipeline 
{
    agent any
    
    triggers 
    {
        pollSCM('*/1 * * * *')
    }

    environment
    {
        WINDOWSIP="192.168.56.1"
        KUBECTLTCPPORT=""
        GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no"  
    }
    
    stages 
    {

        stage('start proxy')
        {
            steps
            {
                script
                {
                    echo "open a terminal where it running proxy command in the backround..."
                    sh '''
                        nohub ssh -o StrictHostKeyChecking=no pavel@192.168.56.1 "kubectl proxy --address=0.0.0.0 --port=8080 --accept-hosts=.*" &
                    '''
                    
                }
            }
        }
        stage('Changes Check') 
        {
            steps 
            {
                script 
                {
                    def changeSets = currentBuild.changeSets
                    if(changeSets.size()==0)
                    {
                        echo "no changes, ran manually proceeding"
                        env.RELEVANT_CHANGES = "true"
                    }
                    else
                    {
                        def modifiedFiles = []
                        for(changeSet in changeSets) {
                            for(item in changeSet) {
                                modifiedFiles += item.getAffectedPaths()
                            }
                        }
                        modifiedFiles = modifiedFiles.minus('Jenkinsfile-kube')
                        if (modifiedFiles.isEmpty()) 
                        {
                            println('Skipping pipeline execution as the only change is to the Jenkinsfile.')
                            env.RELEVANT_CHANGES = "false"
                        }
                        else
                        {
                            env.RELEVANT_CHANGES = "true"
                        }
                    }

                }
            }
        }

        stage('Cleanup') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                //Removes Unnecessary files
                echo 'Performing cleanup...'
                sh 'rm -rf *'
                sh "docker images | grep -w 'oksthefox/dockerflask' | grep -w 1\\.[0-9]* | awk '{print \$2}' | xargs -I {} docker rmi oksthefox/dockerflask:{}"
                sh "docker images | grep -w 'oksthefox/dockerdb' | grep -w 1\\.[0-9]* | awk '{print \$2}' | xargs -I {} docker rmi oksthefox/dockerdb:{}"
            }
        }
        
        stage('Clone') 
        {

            when {
                expression {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps
            {
                //clonning from github to workspace
                echo 'Cloning repository...'
                sh 'git clone git@github.com:oksthefox/flask.git'
                sh 'ls'
            }
        }

        stage('Install Dependencies')
        {
            when
            {
                expression
                {
                    return env.RELEVANT_CHANGES !="false"
                }
            }
            steps
            {
                script
                {
                    echo "install the most upgraded pip version"
                    sh "pip install --upgrade pip"
                    echo "installing by playbook all the dependencies"
                    sh "ansible-playbook /var/lib/jenkins/ansible-docker-jenkins/installLocal.yml"
                    sh "pip install -r ./flask/flask-app/requirements.txt"
                }
            }
        }

        stage('Build-create docker image and push') 
        {
            when {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                dir('./flask/flask-app/') 
                {
                    // Stage building
                    echo 'Building flask'
                    sh "docker build -t oksthefox/dockerflask:1.${BUILD_NUMBER} -t oksthefox/dockerflask:latest ."
                    sh "docker push --all-tags oksthefox/dockerflask"
                }
            }
        }
        
        stage('Build-create docker DB image and push') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                dir('./flask/mysql/')
                {
                    echo 'building db'
                    sh "docker build -t oksthefox/dockerdb:1.${BUILD_NUMBER} -t oksthefox/dockerdb:latest ."
                    sh "docker push --all-tags oksthefox/dockerdb"
                }
            }
        }
        
        stage('Deploy for testing') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                echo 'Making Sure im in right context...'
                sh "kubectl config use-context docker-desktop"
                echo "deploying application"
                sh "kubectl apply -f ./flask/kubeFiles/deployment.yml"
                sh "kubectl apply -f ./flask/kubeFiles/service.yml"

                env.KUBECTLTCPPORT=sh(script: "kubectl get service flask-service -o=jsonpath='{.spec.ports[*].nodePort}'", returnStdout: true).trim()
            }
        }

        stage('Rollout Restart Test') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                echo 'Performing rollout restart...'
                sh "kubectl rollout restart deployment/flask-deployment"
                sh "kubectl rollout restart deployment/mysql-deployment"
            }
        }

        stage('Test testing enviornment (d4d)')
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps
            {
                sh "curl http://${env.WINDOWSIP}:${env.KUBECTLTCPPORT}"
            }
        }

        
        stage('closing testing enviroment')
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps
            {
                script
                {
                    echo "closing test enviroment..."
                    sh "kubectl delete -f ./flask/kubeFiles/deployment.yml"
                    sh "kubectl delete -f ./flask/kubeFiles/service.yml"
                }

            }
        }

        stage('deploying on google k8s production')
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps
            {
                script
                {
                    echo "deploying on google k8s production..."
                    sh "kubectl config use-context gke_ultra-palisade-393305_europe-north1-a_flask-production"
                    sh "kubectl apply -f ./flask/kubeFiles/deployment.yml"
                    sh "kubectl apply -f ./flask/kubeFiles/service.yml"

                }
            }

        }

        stage('Rollout Restart K8s') 
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps 
            {
                echo 'Performing rollout restart...'
                sh "kubectl rollout restart deployment/flask-deployment"
                sh "kubectl rollout restart deployment/mysql-deployment"
            }
        }

        stage('closing proxy')
        {
            when 
            {
                expression 
                {
                    return env.RELEVANT_CHANGES != "false"
                }
            }
            steps
            {
                script
                {
                    sh '''
                        ssh -o StrictHostKeyChecking=no pavel@192.168.56.1 "taskkill /F /IM kubectl.exe"
                    '''
                }
            }
        }

    }
}
